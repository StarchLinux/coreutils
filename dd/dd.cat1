DD(1)                     BSD General Commands Manual                    DD(1)

NNAAMMEE
     dddd — convert and copy a file

SSYYNNOOPPSSIISS
     dddd [_o_p_e_r_a_n_d _._._.]

DDEESSCCRRIIPPTTIIOONN
     The dddd utility copies the standard input to the standard output, applying
     any specified conversions.  Input data is read and written in 512-byte
     blocks.  If input reads are short, input from multiple reads are aggre‐
     gated to form the output block.  When finished, dddd displays the number of
     complete and partial input and output blocks and truncated input records
     to the standard error output.

     The following operands are available:

     iiff==_f_i_l_e  Read input from _f_i_l_e instead of the standard input.

     ooff==_f_i_l_e  Write output to _f_i_l_e instead of the standard output.  Any regu‐
              lar output file is truncated unless the nnoottrruunncc conversion value
              is specified.  If an initial portion of the output file is
              skipped (see the sseeeekk operand), the output file is truncated at
              that point.

     iibbss==_n    Set the input block size to _n bytes instead of the default 512.

     oobbss==_n    Set the output block size to _n bytes instead of the default 512.

     bbss==_n     Set both the input and output block size to _n bytes, superseding
              the iibbss and oobbss operands.  If no conversion values other than
              nnooeerrrroorr, nnoottrruunncc, or ssyynncc are specified, then each input block
              is copied to the output as a single block without any aggrega‐
              tion of short blocks.

     ccbbss==_n    Set the conversion record size to _n bytes.  The conversion
              record size is required by the record oriented conversion val‐
              ues.

     ccoouunntt==_n  Copy only _n input blocks.

     ffiilleess==_n  Copy _n input files before terminating.  This operand is only
              applicable when the input device is a tape.

     sseeeekk==_n   Seek _n blocks from the beginning of the output before copying.
              On non-tape devices, an lseek(2) operation is used.  Otherwise,
              existing blocks are read and the data discarded.  If the user
              does not have read permission for the tape, it is positioned
              using the tape ioctl(2) function calls.  If the seek operation
              is past the end of file, space from the current end of file to
              the specified offset is filled with blocks of NUL bytes.

     sskkiipp==_n   Skip _n blocks from the beginning of the input before copying.
              On input which supports seeks, an lseek(2) operation is used.
              Otherwise, input data is read and discarded.  For pipes, the
              correct number of bytes is read.  For all other devices, the
              correct number of blocks is read without distinguishing between
              a partial or complete block being read.

     ccoonnvv==_v_a_l_u_e[, _v_a_l_u_e _._._.]
              Where _v_a_l_u_e is one of the symbols from the following list.

              aasscciiii, oollddaasscciiii
                       The same as the uunnbblloocckk value except that characters
                       are translated from EBCDIC to ASCII before the records
                       are converted.  (These values imply uunnbblloocckk if the op‐
                       erand ccbbss is also specified.)  There are two conversion
                       maps for ASCII.  The value aasscciiii specifies the recom‐
                       mended one which is compatible with System V.  The
                       value oollddaasscciiii specifies the one used in historic AT&T
                       and pre-4.3BSD-reno systems.

              bblloocckk    Treats the input as a sequence of newline or end-of-
                       file terminated variable length records independent of
                       input and output block boundaries.  Any trailing new‐
                       line character is discarded.  Each input record is con‐
                       verted to a fixed length output record where the length
                       is specified by the ccbbss operand.  Input records shorter
                       than the conversion record size are padded with spaces.
                       Input records longer than the conversion record size
                       are truncated.  The number of truncated input records,
                       if any, is reported to the standard error output at the
                       completion of the copy.

              eebbccddiicc, iibbmm, oollddeebbccddiicc, oollddiibbmm
                       The same as the bblloocckk value except that characters are
                       translated from ASCII to EBCDIC after the records are
                       converted.  (These values imply bblloocckk if the operand
                       ccbbss is also specified.)  There are four conversion maps
                       for EBCDIC.  The value eebbccddiicc specifies the recommended
                       one which is compatible with AT&T System V UNIX.  The
                       value iibbmm is a slightly different mapping, which is
                       compatible with the AT&T System V UNIX iibbmm value.  The
                       values oollddeebbccddiicc and oollddiibbmm are maps used in historic
                       AT&T and pre-4.3BSD-reno systems.

              llccaassee    Transform uppercase characters into lowercase charac‐
                       ters.

              nnooeerrrroorr  Do not stop processing on an input error.  When an
                       input error occurs, a diagnostic message followed by
                       the current input and output block counts will be writ‐
                       ten to the standard error output in the same format as
                       the standard completion message.  If the ssyynncc conver‐
                       sion is also specified, any missing input data will be
                       replaced with NUL bytes (or with spaces if a block ori‐
                       ented conversion value was specified) and processed as
                       a normal input buffer.  If the ssyynncc conversion is not
                       specified, the input block is omitted from the output.
                       On input files which are not tapes or pipes, the file
                       offset will be positioned past the block in which the
                       error occurred using lseek(2).

              nnoottrruunncc  Do not truncate the output file.  This will preserve
                       any blocks in the output file not explicitly written by
                       dddd.  The nnoottrruunncc value is not supported for tapes.

              oossyynncc    Pad the final output block to the full output block
                       size.  If the input file is not a multiple of the out‐
                       put block size after conversion, this conversion forces
                       the final output block to be the same size as preceding
                       blocks for use on devices that require regularly sized
                       blocks to be written.  This option is incompatible with
                       use of the bbss==_n block size specification.

              sswwaabb     Swap every pair of input bytes.  If an input buffer has
                       an odd number of bytes, the last byte will be ignored
                       during swapping.

              ssyynncc     Pad every input block to the input buffer size.  Spaces
                       are used for pad bytes if a block oriented conversion
                       value is specified, otherwise NUL bytes are used.

              uuccaassee    Transform lowercase characters into uppercase charac‐
                       ters.

              uunnbblloocckk  Treats the input as a sequence of fixed length records
                       independent of input and output block boundaries.  The
                       length of the input records is specified by the ccbbss op‐
                       erand.  Any trailing space characters are discarded and
                       a newline character is appended.

     Where sizes are specified, a decimal number of bytes is expected.  If the
     number ends with a ‘b’, ‘k’ or ‘K’, ‘m’ or ‘M’, or ‘w’, the number is
     multiplied by 512, 1024 (1K), 1048576 (1M), or the number of bytes in an
     integer, respectively.  Two or more numbers may be separated by an ‘x’ to
     indicate a product.

     When finished, dddd displays the number of complete and partial input and
     output blocks, truncated input records, and odd-length byte-swapping
     blocks to the standard error output.  A partial input block is one where
     less than the input block size was read.  A partial output block is one
     where less than the output block size was written.  Partial output blocks
     to tape devices are considered fatal errors.  Otherwise, the rest of the
     block will be written.  Partial output blocks to character devices will
     produce a warning message.  A truncated input block is one where a vari‐
     able length record oriented conversion value was specified and the input
     line was too long to fit in the conversion record or was not newline ter‐
     minated.

     Normally, data resulting from input or conversion or both are aggregated
     into output blocks of the specified size.  After the end of input is
     reached, any remaining output is written as a block.  This means that the
     final output block may be shorter than the output block size.

     If dddd receives a SIGINFO (see the “status” argument for stty(1)) signal,
     the current input and output block counts will be written to the standard
     error output in the same format as the standard completion message.  If
     dddd receives a SIGINT signal, the current input and output block counts
     will be written to the standard error output in the same format as the
     standard completion message and dddd will exit.

EEXXIITT SSTTAATTUUSS
     The dddd utility exits 0 on success, and >0 if an error occurs.

EEXXAAMMPPLLEESS
     Write an OpenBSD floppy image to a floppy disk:

           # dd if=floppy34.fs of=/dev/rfd0c bs=32k

     Create an ISO-9660 image of a CD-ROM:

           # dd if=/dev/rcd0c of=disk.iso bs=32k

SSEEEE AALLSSOO
     cp(1), mt(1), tr(1)

SSTTAANNDDAARRDDSS
     The dddd utility is compliant with the IEEE Std 1003.1-2008 (“POSIX.1”)
     specification.

     The conversions aasscciiii, eebbccddiicc, and iibbmm are compliant with the X/Open
     Portability Guide Issue 4 (“XPG4”) specification.

     The ffiilleess operand, the conversions oollddaasscciiii, oollddeebbccddiicc, oollddiibbmm, and
     oossyynncc, and the size multipliers ‘K’, ‘m’, ‘M’, and ‘w’ are all extensions
     to those specifications.

BSD                            October 25, 2012                            BSD
